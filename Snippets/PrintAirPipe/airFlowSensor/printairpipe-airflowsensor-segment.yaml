esphome:
  name: pap-airflowsensor-segment
  friendly_name: PrintAirPipe_AirFlowSensor_Segment

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret printAirPipe_AirFlowSensor_api_key

ota:
  password: !secret printAirPipe_AirFlowSensor_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "PAP-Airflow-Segment"
    password: !secret printAirPipe_AirFlowSensor_ap_password

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret printAirPipe_AirFlowSensor_web_server_user
    password: !secret printAirPipe_AirFlowSensor_web_server_password

time:
  - platform: homeassistant
    id: homeassistant_time
    
text_sensor:
  - platform: version
    name: "ESPHome Version"

  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
    mac_address:
      name: Mac Wifi Address
    scan_results:
      name: Latest Scan Results

globals:
  - id: pulses_at_max_speed  # this value is estimated by expererience. Adapt if needed.
    type: float
    restore_value: no
    initial_value: '20.0'

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: uptime
    name: Uptime

  - platform: pulse_meter
    id: flow_meter_pulse_rate
    pin: 
      number: GPIO10
      inverted: true
      mode: INPUT_PULLUP
    unit_of_measurement: 'pulses/s'
    name: 'Flow Meter impulse rate'
    internal_filter: 10ms
    accuracy_decimals: 0
    internal_filter_mode: EDGE
    timeout: 2s  
    filters:
      - lambda: return x / 60.0;
    on_value:
      then:
        - if:
            condition:
              switch.is_on: control_anim_by_flow_speed_switch
            then:
              - number.set:
                  id: animation_speed
                  value: !lambda 'return (x/id(pulses_at_max_speed)) * 100.0;'

  - platform: template
    name: "Flow meter wheel speed"
    id: "flow_meter_wheel_speed"
    update_interval: 1s
    accuracy_decimals: 1
    unit_of_measurement: 'rounds/s'
    lambda: |-
        float rps = id(flow_meter_pulse_rate).state / 3.0;
        return rps;      

switch:
  - platform: template
    name: "Light on/off"
    id: light_on_off_switch
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - light.turn_on: 
          id: light_1
          effect: "Running light"
    turn_off_action:
      - light.turn_off: light_1

  - platform: template
    name: "Control led animation by flow speed"
    id: control_anim_by_flow_speed_switch
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    disabled_by_default: True

number:
  - platform: template
    name: "Animation speed"
    id: animation_speed
    max_value: 100
    min_value: 0
    step: 1
    unit_of_measurement: "%"
    optimistic: true
    restore_value: true
    disabled_by_default: True
    mode: slider

  - platform: template
    name: "Light brightness"
    id: light_brightness
    max_value: 100
    min_value: 15
    step: 1
    unit_of_measurement: "%"
    optimistic: true
    restore_value: true
    mode: slider


light:
  - platform: neopixelbus
    restore_mode: ALWAYS_ON
    id: light_1
    type: GRB
    variant: WS2812
    pin: GPIO09
    num_leds: 3
    name: "LEDs"
    internal: true
    effects:
      - addressable_lambda:
          name: "Running light"
          update_interval: 16ms
          lambda: |-
            if (initial_run) 
            {
              it.all() = Color::BLACK;
            }

            static int next_update;
            static int pos;

            if (next_update<=millis() && id(animation_speed).state > 0)
            {

              int red = current_color.red;
              int green = current_color.green;
              int blue = current_color.blue;

              it.all() = Color::BLACK;

              for (int i = 0; i < it.size(); i++)
              {
                //float brightness = map(abs(pos - i), 0, it.size() - 1, 0.0, 1.0);
                float brightness = i == pos ? (id(light_brightness).state / 100.0) : 0.0;

                it[i] = Color(brightness * red, brightness * green, brightness * blue);

              }

              pos = (pos + 1) % it.size();

              next_update= millis() + 1635 - (id(animation_speed).state/100.0)*1500; // this limits the update interval to a range of 135ms to 1635ms
            } else if (id(animation_speed).state == 0)
            {
              int red = current_color.red;
              int green = current_color.green;
              int blue = current_color.blue;
              float brightness = id(light_brightness).state / 100.0;
              it.all() = Color(brightness * red, brightness * green, brightness * blue);
            }